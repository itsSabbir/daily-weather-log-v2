# .github/workflows/weather_fetcher.yml

# Name of the GitHub Actions workflow. This is displayed on the Actions tab of your repository.
name: Fetch Hourly Weather Data

# Controls when the workflow will run.
on:
  # 'schedule' allows you to trigger the workflow at scheduled times using cron syntax.
  schedule:
    # Cron syntax: minute hour day(month) month day(week)
    # '15 * * * *' means "at 15 minutes past every hour, every day, every month, every day of the week".
    # Example: 01:15, 02:15, 03:15 UTC, etc.
    - cron: '15 * * * *'

  # 'workflow_dispatch' allows you to manually trigger the workflow from the Actions tab.
  # Useful for testing or ad-hoc runs.
  workflow_dispatch:

  # 'push' triggers the workflow on push events to specified branches.
  # Useful for testing changes to the workflow or script itself.
  # When a push occurs, this workflow will run. If the 'Wait 5 minutes' step below is enabled,
  # the actual data fetching and subsequent commit (if any) will happen ~5 minutes after the push.
  push:
    branches:
      - main # Or your default branch (e.g., master)

# Defines one or more jobs that the workflow will execute.
# Jobs run in parallel by default, but can be configured to run sequentially.
jobs:
  # Name of the job (you can choose any descriptive name).
  fetch-and-commit-weather:
    # Specifies the type of runner the job will run on.
    # 'ubuntu-latest' uses the latest stable version of Ubuntu provided by GitHub.
    runs-on: ubuntu-latest

    # Defines permissions granted to the GITHUB_TOKEN for this job.
    # The 'contents: write' permission is necessary for the action to commit
    # changes back to the repository (e.g., the updated weather_data.csv).
    permissions:
      contents: write

    # 'steps' are a sequence of tasks that will be executed as part of the job.
    steps:
      # Step 1: Checkout repository
      # This action checks out your repository onto the runner,
      # allowing the workflow to access your script (fetch_weather.py) and other files.
      - name: Checkout repository
        uses: actions/checkout@v4 # Uses version 4 of the checkout action

      # --- OPTIONAL DELAY STEP ---
      # Step 1.5 (Optional): Wait for a period after a push event
      # This step introduces a delay before proceeding with the rest of the workflow.
      # It's configured to only activate if the workflow was triggered by a 'push' event.
      # The primary use case here is to run the weather fetch ~5 minutes AFTER you've pushed a commit.
      #
      # To ACTIVATE this 5-minute delay specifically for 'push' events:
      #   Ensure the 'if' condition line and the 'run' block lines are UNCOMMENTED (no '#' at the start).
      #
      # To DEACTIVATE this delay (i.e., run immediately after a push, or as per schedule/dispatch):
      #   Comment out (add '#' at the start) the 'if' and 'run' lines below.
      #   Alternatively, you can comment out the entire '- name: Wait 5 minutes...' step.
      #
      # If you want the delay for ALL trigger types (push, schedule, workflow_dispatch),
      # you can remove or comment out the 'if: github.event_name == 'push'' line.
      - name: Wait 5 minutes (if triggered by push)
        # This condition ensures the sleep command only runs if the event triggering the workflow is a 'push'.
        # 'github.event_name' is a context variable providing the type of event.
        if: github.event_name == 'push' # <<< UNCOMMENT THIS LINE to make the delay PUSH-SPECIFIC
        run: |
          echo "Workflow was triggered by event: '${{ github.event_name }}'."
          echo "Conditional delay is active. Waiting for 5 minutes (300 seconds) before fetching weather data..."
          sleep 300 # Pauses execution for 300 seconds (5 minutes).
          echo "Delay finished. Resuming workflow."
      # --- END OF OPTIONAL DELAY STEP ---

      # Step 2: Set up Python
      # This action sets up a Python environment on the runner.
      - name: Set up Python
        uses: actions/setup-python@v5 # Uses version 5 of the setup-python action
        with:
          python-version: '3.11' # Specifies the Python version to use.
          # Optional: Caching pip dependencies can speed up subsequent runs.
          # To use caching, you would typically have a requirements.txt file.
          # cache: 'pip'
          # cache-dependency-path: 'requirements.txt' # Path to your requirements file

      # Step 3: Install dependencies
      # This step installs the Python packages required by your script.
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip # Upgrade pip to the latest version
          pip install requests                 # Install the 'requests' library
          # If you were using a requirements.txt file, you would uncomment the following line:
          # pip install -r requirements.txt

      # Step 4: Fetch and write weather data
      # This step executes your Python script (fetch_weather.py).
      # The Python script is designed to:
      #   1. Fetch current weather data from the Open-Meteo API.
      #   2. Append this data as a new row to 'weather_data.csv'.
      #   3. Exit with status code 0 if successful.
      #   4. Exit with status code 1 if any error occurs (e.g., API unreachable, failed to write CSV).
      # If the script exits with a non-zero code, this GitHub Actions step will fail, and by default, the entire job will fail.
      - name: Fetch and write weather data
        id: fetch_data # Gives this step an ID so its outputs can be referenced (not used here, but good practice for advanced workflows)
        run: python fetch_weather.py
        # The Python script (fetch_weather.py) uses sys.exit(0) for success
        # and sys.exit(1) for failure, which GitHub Actions automatically interprets.

      # Step 5: Check for file changes in weather_data.csv
      # This step determines if the 'fetch_weather.py' script actually modified 'weather_data.csv'.
      # We only want to proceed with a commit if there are actual content changes in the file.
      # This prevents empty commits if, for instance, the API returns the exact same data as the last fetch.
      - name: Check for file changes
        id: git_diff # Give this step an ID so its output ('changed') can be referenced in subsequent 'if' conditions.
        run: |
          # 'git diff --quiet --exit-code weather_data.csv' is a command to check for changes in the specified file.
          #   --quiet: Suppresses all output from git diff.
          #   --exit-code: Makes git diff exit with 0 if there are no differences, or 1 if differences are found.
          #
          # The 'if' statement checks the exit code of 'git diff'.
          if git diff --quiet --exit-code weather_data.csv; then
            # No differences found (git diff exited with 0).
            echo "No content changes in weather_data.csv."
            # Set an output variable 'changed' to 'false' for this step.
            # This can be accessed by other steps using 'steps.git_diff.outputs.changed'.
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            # Differences were found (git diff exited with 1).
            echo "Content changes detected in weather_data.csv."
            # Set the output variable 'changed' to 'true'.
            echo "changed=true" >> $GITHUB_OUTPUT
          fi
        # `continue-on-error: true` is crucial here.
        # If `git diff` finds changes, it exits with code 1. Without `continue-on-error: true`,
        # this step would be marked as failed, and the workflow would stop (unless subsequent steps
        # have `if: always()` or `if: failure()`). We want the workflow to *continue* if changes are found,
        # so it can proceed to commit them.
        continue-on-error: true

      # Step 6: Configure Git User for commit
      # If changes were detected in 'weather_data.csv', this step configures the Git user name
      # and email that will be associated with the commit made by the workflow.
      # This is necessary because 'git commit' requires user information.
      - name: Configure Git User for commit
        # This 'if' condition ensures this step only runs if the 'git_diff' step
        # (specifically, its 'changed' output) indicates that changes were found.
        if: steps.git_diff.outputs.changed == 'true'
        run: |
          git config user.name "github-actions[bot]"                             # Set the commit author name
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com" # Standard GitHub Actions bot email
          echo "Git user configured for commit."

      # Step 7: Commit and push if changes exist
      # This step stages the modified 'weather_data.csv', creates a commit, and pushes it
      # to the repository. It only runs if changes were detected.
      - name: Commit and push if changes exist
        if: steps.git_diff.outputs.changed == 'true' # Conditional execution
        run: |
          echo "Attempting to add, commit, and push weather_data.csv."
          git add weather_data.csv # Stage the 'weather_data.csv' file for commit.

          # This is an additional safety check. 'git diff --staged --quiet' verifies if
          # there are any *actual content changes* staged for commit after 'git add'.
          # This can help prevent commits if only file metadata (like permissions, though
          # unlikely for this file on GitHub runners) changed, or if 'git add' was run
          # but no actual content differences were staged for some reason.
          # It aims to prevent truly "empty" commits.
          if git diff --staged --quiet; then
            echo "No actual content changes were staged for commit after 'git add weather_data.csv'."
            echo "This might happen if only file mode changed or if the file was added but contained no new diffs."
            echo "Skipping commit to avoid an empty one."
          else
            # Create a commit message that includes a UTC timestamp for when the data was processed.
            COMMIT_TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
            git commit -m "Automated weather data update: ${COMMIT_TIMESTAMP}"
            echo "Commit created with message: 'Automated weather data update: ${COMMIT_TIMESTAMP}'. Attempting push..."

            # Retry logic for 'git push'. Network issues or temporary repository locks can
            # cause 'git push' to fail occasionally. Retrying a few times can improve reliability.
            for i in 1 2 3; do
              echo "Push attempt #$i..."
              # Attempt to push the commit to the remote repository.
              # The GITHUB_TOKEN (which has 'contents: write' permission, set at the job level)
              # is automatically used by actions/checkout and git commands for authentication.
              if git push; then
                echo "Push successful on attempt #$i!"
                break # Exit the retry loop on successful push
              fi
              # If not the last attempt, wait before retrying.
              if [ $i -lt 3 ]; then
                echo "Push attempt #$i failed. Retrying in 20 seconds..."
                sleep 20 # Wait 20 seconds before the next attempt
              else
                # If all push attempts (3 in this case) fail, log a critical error
                # and exit with code 1. This will mark the step and job as failed.
                echo "CRITICAL: All push attempts failed after $i retries. Manual intervention may be required to sync weather_data.csv."
                exit 1 # Fail the job
              fi
            done
          fi
          echo "Commit and push process completed (or skipped if no staged changes)."

      # Step 8: Report if no changes were made
      # This step runs if the 'git_diff' step did *not* detect changes in 'weather_data.csv'.
      # It's primarily for logging purposes, making it clear in the workflow logs
      # why no commit was made.
      - name: No changes to commit
        # This 'if' condition ensures this step only runs if the 'git_diff' step's
        # 'changed' output is NOT 'true' (i.e., it's 'false' or not set).
        if: steps.git_diff.outputs.changed != 'true'
        run: echo "No file content changes were detected by git_diff for weather_data.csv. Nothing to commit."