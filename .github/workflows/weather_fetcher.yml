# .github/workflows/weather_fetcher.yml
# Production Grade: Enhanced Weather Data Fetcher
# This workflow fetches hourly weather data, applies personalized commit authorship,
# and incorporates comprehensive error handling, explicit logic steps, and best practices
# for maximum clarity, robustness, and maintainability in a production environment.

name: Fetch Hourly Weather Data

on:
  schedule:
    # Scheduled run: At 15 minutes past every hour (UTC).
    - cron: '15 * * * *'
  workflow_dispatch: # Allows manual triggering from the GitHub Actions UI.
  push: # Triggers on pushes to the main branch (useful for testing workflow modifications).
    branches:
      - main # Adjust if your default branch is different (e.g., master).

# Concurrency Management:
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  fetch-and-commit-weather:
    name: Fetch, Process, and Commit Weather Data
    runs-on: ubuntu-latest
    
    permissions:
      contents: write

    env:
      TARGET_FILENAME: "weather_log.csv"            # CORRECTED: Matches the Python script's output file.
      PYTHON_SCRIPT_NAME: "fetch_weather_aggregator.py" # Centralize script name
      PYTHON_VERSION: '3.11'
      GIT_AUTHOR_NAME: "Sabbir Hossain"
      GIT_AUTHOR_EMAIL: "hossain.sabbir17@gmail.com"

    steps:
      # --- Step 1: Source Code Checkout ---
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # --- Step 1.5 (Optional): Conditional Delay for Push Triggers ---
      - name: Wait 5 minutes (if triggered by push)
        # if: github.event_name == 'push' # <<< UNCOMMENT THIS LINE to make the delay PUSH-SPECIFIC
        run: |
          # The logic is simplified. This block only runs if the step's 'if' condition is met.
          if [[ "${{ github.event_name }}" == "push" ]]; then
            echo "Workflow was triggered by a push event. Waiting for 5 minutes (300 seconds)..."
            sleep 300
            echo "Delay finished. Resuming data fetch operations."
          else
            echo "Proceeding without delay (trigger: '${{ github.event_name }}')."
          fi
      # --- END OF OPTIONAL DELAY STEP ---

      # --- Step 2: Python Environment Setup ---
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          # IMPROVEMENT: Use requirements.txt for precise cache invalidation.
          cache-dependency-path: 'requirements.txt'

      # --- Step 3: Install Python Script Dependencies ---
      - name: Install dependencies from requirements.txt
        run: |
          echo "Upgrading pip package manager..."
          python -m pip install --upgrade pip
          echo "Installing dependencies from 'requirements.txt'..."
          pip install -r requirements.txt
          echo "Python dependencies installation complete."

      # --- Step 4: Execute Weather Data Fetch Script ---
      - name: Fetch and write weather data
        id: fetch_data
        run: python ${{ env.PYTHON_SCRIPT_NAME }} # CORRECTED: Executes the correct script file.

      # --- Step 5: Verify File Changes Post-Script Execution ---
      - name: Check for file changes
        id: git_diff
        run: |
          echo "Verifying content changes in '${{ env.TARGET_FILENAME }}'..."
          if git diff --quiet --exit-code ${{ env.TARGET_FILENAME }}; then
            echo "No content modifications detected in '${{ env.TARGET_FILENAME }}'."
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "Content modifications detected in '${{ env.TARGET_FILENAME }}'."
            echo "changed=true" >> $GITHUB_OUTPUT
          fi
        continue-on-error: true # Desired behavior as 'git diff' exits with 1 if changes are found.

      # The rest of the workflow (steps 6, 7, 8) remains the same as it correctly
      # uses the env variables which have now been corrected.
      
      # --- Step 6: Configure Git User for Commit Authorship ---
      - name: Configure Git User for commit
        if: steps.git_diff.outputs.changed == 'true'
        run: |
          echo "Configuring Git user for commit authorship as '${{ env.GIT_AUTHOR_NAME }}'..."
          git config --local user.name "${{ env.GIT_AUTHOR_NAME }}"
          git config --local user.email "${{ env.GIT_AUTHOR_EMAIL }}"
          echo "Git commit author set to: ${{ env.GIT_AUTHOR_NAME }} <${{ env.GIT_AUTHOR_EMAIL }}>"

      # --- Step 7: Stage, Commit, and Push Changes ---
      - name: Commit and push if changes exist
        if: steps.git_diff.outputs.changed == 'true'
        run: |
          echo "Preparing to stage, commit, and push changes for '${{ env.TARGET_FILENAME }}'..."
          git add ${{ env.TARGET_FILENAME }}
          
          if git diff --staged --quiet; then
            echo "WARNING: No actual content changes were staged after 'git add'."
            echo "Skipping commit to prevent an empty or unnecessary commit."
          else
            COMMIT_TIMESTAMP_UTC=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
            COMMIT_MESSAGE="Automated weather data update: ${COMMIT_TIMESTAMP_UTC}"
            echo "Creating Git commit with message: '${COMMIT_MESSAGE}'"
            git commit --author="${{ env.GIT_AUTHOR_NAME }} <${{ env.GIT_AUTHOR_EMAIL }}>" -m "${COMMIT_MESSAGE}"

            REMOTE_BRANCH_NAME="${{ github.ref_name }}"
            echo "Attempting to synchronize local branch with remote '${REMOTE_BRANCH_NAME}' using 'git pull --rebase'..."
            if ! git pull --rebase origin ${REMOTE_BRANCH_NAME}; then
                echo "CRITICAL FAILURE: 'git pull --rebase origin ${REMOTE_BRANCH_NAME}' failed. Aborting push."
                exit 1
            fi
            echo "Synchronization successful."

            MAX_PUSH_ATTEMPTS=3
            PUSH_RETRY_DELAY_SECONDS=20
            for (( attempt=1; attempt<=MAX_PUSH_ATTEMPTS; attempt++ )); do
              echo "Attempting to push commit to 'origin/${REMOTE_BRANCH_NAME}' (Attempt ${attempt}/${MAX_PUSH_ATTEMPTS})..."
              if git push origin ${REMOTE_BRANCH_NAME}; then
                echo "Push successful on attempt #${attempt}!"
                break
              fi
              
              if [ ${attempt} -lt ${MAX_PUSH_ATTEMPTS} ]; then
                echo "Push attempt #${attempt} failed. Retrying in ${PUSH_RETRY_DELAY_SECONDS} seconds..."
                sleep ${PUSH_RETRY_DELAY_SECONDS}
              else
                echo "CRITICAL FAILURE: All ${MAX_PUSH_ATTEMPTS} push attempts failed. Manual intervention required."
                exit 1
              fi
            done
            echo "Commit and push process successfully completed."
          fi
          
      # --- Step 8: Report if No Action Was Taken ---
      - name: No changes to commit
        if: steps.git_diff.outputs.changed != 'true'
        run: |
          echo "No content changes were detected in '${{ env.TARGET_FILENAME }}'."
          echo "No Git commit actions were performed for this run."
          